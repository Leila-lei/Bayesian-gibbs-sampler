beta_p = matrix(mvrnorm(1,beta_p_hat,B_p_hat),d,1)
beta_p_record[[itr]] = beta_p
## v
for (i in 1:n){
delta_i_hat = (y[i]-(t(x[,1])%*%beta_p))^2/(tau2*sigma)
v[i] = rgig(1, lambda=0.5, chi=delta_i_hat, psi=gamma_i_hat)
}
v_record[[itr]] = v
if (itr%%1200==0){print(paste0("Dist:",dist_eps," p:",p," itr: ",itr,"/",itr_total))}
}
t = as.numeric(proc.time()-ptm)[3]
save(beta_p_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Engel\\Double Exponential Prior\\","GWS_",p,"_",dist_eps,"_betap.RData"))
save(v_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Engel\\Double Exponential Prior\\","GWS_",p,"_",dist_eps,"_v.RData"))
save(t, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Engel\\Double Exponential Prior\\","GWS_",p,"_",dist_eps,"_t.RData"))
}
}
x[,i]
x
x=matrix(cbind(rep(1,n),engel[1]),d,n)
x
rep(1,n)
x=matrix(cbind(rep(1,n),
engel[1]
engel[1]
cbind(rep(1,n),engel[1])
matrix(cbind(rep(1,n),engel[1]),d,n)
class(cbind(rep(1,n),engel[1]),d,n)
class(cbind(rep(1,n),engel[1]))
t(cbind(matrix(rep(1,n),n,1),matrix(engel[1],n,d-1)))
cbind(matrix(rep(1,n),n,1),matrix(engel[1],n,d-1))
matrix(rep(1,n),n,1)
matrix(engel[1],n,d-1)
engel[1]
matrix(engel[1])
matrix(engel$income,n,d-1)
x = t(cbind(matrix(rep(1,n),n,1),matrix(engel$income,n,d-1)))
x
y = engel$foodexp
class(y)
y = matrix(engel$foodexp)
dim(y)
# install.packages("matrixNormal")
# install.packages("GeneralizedHyperbolic")
# install.packages("mcmcse")
# install.packages("nimble")
# install.packages("purrr")
# install.packages("coda")
library(MASS)
library(matrixNormal)
library(GeneralizedHyperbolic)
library(mcmcse)
library(nimble)
library(coda)
library(quantreg)
rm(list=ls())
set.seed(0)
data(engel)
## Setup
quantiles=c(0.5)
# quantiles=c(0.1,0.5,0.9)
# dist_eps_list=c("stdN","heteroN","student")  ## heteroN requires d>=3
dist_eps_list=c("stdN","student")
itr_total = 12000
n=nrow(engel)
d=ncol(engel) #dimension of x
lambda0 = 0.14
## Generate Data
for (dist_eps in dist_eps_list){
for (p in quantiles){
## Import Data
x = t(cbind(matrix(rep(1,n),n,1),matrix(engel$income,n,d-1)))
y = matrix(engel$foodexp)
## Gibbs sampler with Double Exponential Prior
ptm = proc.time()
beta_p0=matrix(rep(0,d),d,1)
omega=rexp(d, 2/(lambda0^2))
Omega=diag(d)*omega
beta_p = matrix(mvrnorm(1,beta_p0,Omega))
beta_p_record = rep(list(), itr_total)
omega_record = rep(list(), itr_total)
for (itr in 1:itr_total){
## omega
for (i in 1:d){
omega[i] = rgig(1, 0.5, abs(beta_p-beta_p0)[i,], lambda0)
}
omega_record[[itr]] = omega
Omega=diag(d)*omega
## beta_p
beta_p = matrix(mvrnorm(1,beta_p0,Omega),d,1)
beta_p_record[[itr]] = beta_p
if (itr%%1200==0){print(paste0("Dist:",dist_eps," p:",p," itr: ",itr,"/",itr_total))}
}
t = as.numeric(proc.time()-ptm)[3]
save(beta_p_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Engel\\Double Exponential Prior\\","DEP_",p,"_",dist_eps,"_betap.RData"))
save(omega_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Engel\\Double Exponential Prior\\","DEP_",p,"_",dist_eps,"_v.RData"))
save(t, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Engel\\Double Exponential Prior\\","DEP_",p,"_",dist_eps,"_t.RData"))
}
}
# beta_p = list()
# for (i in 1:length(beta_p_record[[1]])){
#     beta_p[[i]]=unlist(lapply(beta_p_record, function(x){return(x[i,])}))[2000:3000]
# }
# mcse(beta_p[[2]])
# install.packages("matrixNormal")
# install.packages("GeneralizedHyperbolic")
# install.packages("mcmcse")
# install.packages("invgamma")
library(MASS)
library(matrixNormal)
library(GeneralizedHyperbolic)
library(mcmcse)
library(invgamma)
library(quantreg)
rm(list=ls())
set.seed(0)
data(engel)
## Setup
quantiles=c(0.5)
# quantiles=c(0.1,0.5,0.9)
# dist_eps_list=c("stdN","heteroN","student")  ## heteroN requires d>=3
dist_eps_list=c("stdN","student")
itr_total = 12000
n=nrow(engel)
d=ncol(engel) #dimension of x
lambda0 = 0.14
n0=3
s0=0.1
for (dist_eps in dist_eps_list){
for (p in quantiles){
## Import Data
x = t(cbind(matrix(rep(1,n),n,1),matrix(engel$income,n,d-1)))
y = matrix(engel$foodexp)
sigma=rinvgamma(1,n0/2,s0/2)
u=rnorm(n,0,1)
z=rexp(n)
v=sigma*z
theta = (1-2*p)/(p*(1-p))
tau2 = 2/(p*(1-p))
gamma_i_hat = 2/sigma + theta^2/(tau2*sigma)
## Gibbs sampler with scale
ptm = proc.time()
beta_p0=matrix(rep(0,d),d,1)
B_p0=diag(d)*100
beta_p = matrix(mvrnorm(1, beta_p0, B_p0))
beta_p_record = rep(list(), itr_total)
v_record = rep(list(), itr_total)
for (itr in 1:itr_total){
## B_p_hat
B_p_hat = solve(B_p0)
for (i in 1:n){
B_p_hat = B_p_hat + (x[,i]%*%t(x[,i]) / (tau2*sigma*v[i]))
}
B_p_hat = solve(B_p_hat)
## beta_p_hat
beta_p_hat = solve(B_p0)%*%beta_p0
for (i in 1:n){
beta_p_hat = beta_p_hat + matrix(x[,i],d,1)*(y[i]-theta*v[i]) / (tau2*sigma*v[i])
}
beta_p_hat = B_p_hat %*% beta_p_hat
beta_p = matrix(mvrnorm(1,beta_p_hat,B_p_hat),d,1)
beta_p_record[[itr]] = beta_p
## v
for (i in 1:n){
delta_i_hat = (y[i]-(t(x[,1])%*%beta_p))^2/(tau2*sigma)
v[i] = rgig(1, lambda=0.5, chi=delta_i_hat, psi=gamma_i_hat)
}
v_record[[itr]] = v
if (itr%%1200==0){print(paste0("Dist:",dist_eps," p:",p," itr: ",itr,"/",itr_total))}
}
t = as.numeric(proc.time()-ptm)[3]
save(beta_p_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Engel\\Double Exponential Prior\\","GWS_",p,"_",dist_eps,"_betap.RData"))
save(v_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Engel\\Double Exponential Prior\\","GWS_",p,"_",dist_eps,"_v.RData"))
save(t, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Engel\\Double Exponential Prior\\","GWS_",p,"_",dist_eps,"_t.RData"))
}
}
# install.packages("matrixNormal")
# install.packages("GeneralizedHyperbolic")
# install.packages("mcmcse")
# install.packages("invgamma")
library(MASS)
library(matrixNormal)
library(GeneralizedHyperbolic)
library(mcmcse)
library(invgamma)
rm(list=ls())
set.seed(0)
source("data_sim1.R")
## Setup
quantiles=c(0.1,0.5,0.9)
dist_eps_list=c("stdN","heteroN","student")  ## heteroN requires d>=3
# dist_eps_list=c("stdN","student")
itr_total = 12
n=100
d=3 #dimension of x
beta_p=matrix(c(1,1,1))
n0=3
s0=0.1
for (dist_eps in dist_eps_list){
for (p in quantiles){
## Generate Data
data = generate_data(n=n, d=d, dist_eps=dist_eps, beta_p=beta_p)
x = data[[1]]; y=data[[2]]
sigma=rinvgamma(1,n0/2,s0/2)
u=rnorm(n,0,1)
z=rexp(n)
v=sigma*z
theta = (1-2*p)/(p*(1-p))
tau2 = 2/(p*(1-p))
gamma_i_hat = 2/sigma + theta^2/(tau2*sigma)
## Gibbs sampler with scale
ptm = proc.time()
beta_p0=matrix(rep(0,d),d,1)
B_p0=diag(d)*100
beta_p = matrix(mvrnorm(1, beta_p0, B_p0))
beta_p_record = rep(list(), itr_total)
v_record = rep(list(), itr_total)
for (itr in 1:itr_total){
## B_p_hat
B_p_hat = solve(B_p0)
for (i in 1:n){
B_p_hat = B_p_hat + (x[,i]%*%t(x[,i]) / (tau2*sigma*v[i]))
}
B_p_hat = solve(B_p_hat)
## beta_p_hat
beta_p_hat = solve(B_p0)%*%beta_p0
for (i in 1:n){
beta_p_hat = beta_p_hat + matrix(x[,i],d,1)*(y[i]-theta*v[i]) / (tau2*sigma*v[i])
}
beta_p_hat = B_p_hat %*% beta_p_hat
beta_p = matrix(mvrnorm(1,beta_p_hat,B_p_hat),d,1)
beta_p_record[[itr]] = beta_p
## v
for (i in 1:n){
delta_i_hat = (y[i]-(t(x[,1])%*%beta_p))^2/(tau2*sigma)
v[i] = rgig(1, lambda=0.5, chi=delta_i_hat, psi=gamma_i_hat)
}
v_record[[itr]] = v
if (itr%%1200==0){print(paste0("Dist:",dist_eps," p:",p," itr: ",itr,"/",itr_total))}
}
t = as.numeric(proc.time()-ptm)[3]
save(beta_p_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Gibbs with Scale\\","GWS_",p,"_",dist_eps,"_betap.RData"))
save(v_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Gibbs with Scale\\","GWS_",p,"_",dist_eps,"_v.RData"))
save(t, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Gibbs with Scale\\","GWS_",p,"_",dist_eps,"_t.RData"))
}
}
# install.packages("matrixNormal")
# install.packages("GeneralizedHyperbolic")
# install.packages("mcmcse")
# install.packages("invgamma")
library(MASS)
library(matrixNormal)
library(GeneralizedHyperbolic)
library(mcmcse)
library(invgamma)
rm(list=ls())
set.seed(0)
source("C:\\Users\\juyil\\Documents\\la\\R\\data_sim1.R")
## Setup
quantiles=c(0.1,0.5,0.9)
dist_eps_list=c("stdN","heteroN","student")  ## heteroN requires d>=3
# dist_eps_list=c("stdN","student")
itr_total = 12
n=100
d=3 #dimension of x
beta_p=matrix(c(1,1,1))
n0=3
s0=0.1
for (dist_eps in dist_eps_list){
for (p in quantiles){
## Generate Data
data = generate_data(n=n, d=d, dist_eps=dist_eps, beta_p=beta_p)
x = data[[1]]; y=data[[2]]
sigma=rinvgamma(1,n0/2,s0/2)
u=rnorm(n,0,1)
z=rexp(n)
v=sigma*z
theta = (1-2*p)/(p*(1-p))
tau2 = 2/(p*(1-p))
gamma_i_hat = 2/sigma + theta^2/(tau2*sigma)
## Gibbs sampler with scale
ptm = proc.time()
beta_p0=matrix(rep(0,d),d,1)
B_p0=diag(d)*100
beta_p = matrix(mvrnorm(1, beta_p0, B_p0))
beta_p_record = rep(list(), itr_total)
v_record = rep(list(), itr_total)
for (itr in 1:itr_total){
## B_p_hat
B_p_hat = solve(B_p0)
for (i in 1:n){
B_p_hat = B_p_hat + (x[,i]%*%t(x[,i]) / (tau2*sigma*v[i]))
}
B_p_hat = solve(B_p_hat)
## beta_p_hat
beta_p_hat = solve(B_p0)%*%beta_p0
for (i in 1:n){
beta_p_hat = beta_p_hat + matrix(x[,i],d,1)*(y[i]-theta*v[i]) / (tau2*sigma*v[i])
}
beta_p_hat = B_p_hat %*% beta_p_hat
beta_p = matrix(mvrnorm(1,beta_p_hat,B_p_hat),d,1)
beta_p_record[[itr]] = beta_p
## v
for (i in 1:n){
delta_i_hat = (y[i]-(t(x[,1])%*%beta_p))^2/(tau2*sigma)
v[i] = rgig(1, lambda=0.5, chi=delta_i_hat, psi=gamma_i_hat)
}
v_record[[itr]] = v
if (itr%%1200==0){print(paste0("Dist:",dist_eps," p:",p," itr: ",itr,"/",itr_total))}
}
t = as.numeric(proc.time()-ptm)[3]
save(beta_p_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Gibbs with Scale\\","GWS_",p,"_",dist_eps,"_betap.RData"))
save(v_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Gibbs with Scale\\","GWS_",p,"_",dist_eps,"_v.RData"))
save(t, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Gibbs with Scale\\","GWS_",p,"_",dist_eps,"_t.RData"))
}
}
beta_p_record
# install.packages("matrixNormal")
# install.packages("GeneralizedHyperbolic")
# install.packages("mcmcse")
# install.packages("nimble")
# install.packages("purrr")
# install.packages("coda")
library(MASS)
library(matrixNormal)
library(GeneralizedHyperbolic)
library(mcmcse)
library(nimble)
library(coda)
rm(list=ls())
set.seed(0)
source("C:\\Users\\juyil\\Documents\\la\\R\\data_sim1.R")
## Setup
quantiles=c(0.1,0.5,0.9)
dist_eps_list=c("stdN","heteroN","student")  ## heteroN requires d>=3
# dist_eps_list=c("stdN","student")
itr_total = 12
n=100
d=3 #dimension of x
beta_p=matrix(c(1,1,1))
lambda0 = 0.14
## Generate Data
for (dist_eps in dist_eps_list){
for (p in quantiles){
## Generate Data
data = generate_data(n=n, d=d, dist_eps=dist_eps, beta_p=beta_p)
x = data[[1]]; y=data[[2]]
## Gibbs sampler with Double Exponential Prior
ptm = proc.time()
beta_p0=matrix(rep(0,d),d,1)
omega=rexp(d, 2/(lambda0^2))
Omega=diag(d)*omega
beta_p = matrix(mvrnorm(1,beta_p0,Omega))
beta_p_record = rep(list(), itr_total)
omega_record = rep(list(), itr_total)
for (itr in 1:itr_total){
## omega
for (i in 1:d){
omega[i] = rgig(1, 0.5, abs(beta_p-beta_p0)[i,], lambda0)
}
omega_record[[itr]] = omega
Omega=diag(d)*omega
## beta_p
beta_p = matrix(mvrnorm(1,beta_p0,Omega),d,1)
beta_p_record[[itr]] = beta_p
if (itr%%1200==0){print(paste0("Dist:",dist_eps," p:",p," itr: ",itr,"/",itr_total))}
}
t = as.numeric(proc.time()-ptm)[3]
save(beta_p_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Double Exponential Prior\\","DEP_",p,"_",dist_eps,"_betap.RData"))
save(omega_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Double Exponential Prior\\","DEP_",p,"_",dist_eps,"_v.RData"))
save(t, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Double Exponential Prior\\","DEP_",p,"_",dist_eps,"_t.RData"))
}
}
beta_p_record
# install.packages("GeneralizedHyperbolic")
# install.packages("mcmcse")
# install.packages("coda")
library(MASS)
library(GeneralizedHyperbolic)
library(mcmcse)
library(coda)
rm(list=ls())
set.seed(0)
source("C:\\Users\\juyil\\Documents\\la\\R\\data_sim1.R")
## Setup
quantiles=c(0.1,0.5,0.9)
dist_eps_list=c("stdN","heteroN","student")  ## heteroN requires d>=3
# dist_eps_list=c("stdN","student")
itr_total = 12
n=100
d=3 #dimension of x
beta_p=matrix(c(1,1,1))
## Generate Data
for (dist_eps in dist_eps_list){
data = generate_data(n=n, d=d, dist_eps=dist_eps, beta_p=beta_p)
x = data[[1]]; y=data[[2]]
z=rexp(n)
## Generic Gibbs sampler
for (p in quantiles){
ptm = proc.time()
## Initialization
beta_p0=matrix(rep(0,d),d,1)
B_p0=diag(d)*100
beta_p = matrix(mvrnorm(1, beta_p0, B_p0))
theta = (1-2*p)/(p*(1-p))
tau2 = 2/(p*(1-p))
beta_p_record = rep(list(), itr_total)
z_record = rep(list(), itr_total)
for (itr in 1:itr_total){
## B_p_hat
B_p_hat = solve(B_p0)
for (i in 1:n){
B_p_hat = B_p_hat + (x[,i]%*%t(x[,i]) / (tau2*z[i]))
}
B_p_hat = solve(B_p_hat)
## beta_p_hat
beta_p_hat = solve(B_p0)%*%beta_p0
for (i in 1:n){
beta_p_hat = beta_p_hat + matrix(x[,i],d,1)*(y[i]-theta*z[i]) / (tau2*z[i])
}
beta_p_hat = B_p_hat %*% beta_p_hat
beta_p = matrix(mvrnorm(1,beta_p_hat,B_p_hat),d,1)
beta_p_record[[itr]] = beta_p
## z
for (i in 1:n){
delta_i_hat = sqrt((y[i]-(t(x[,i])%*%beta_p))^2/tau2)
gamma_i_hat = sqrt(theta^2/tau2 +2)
z[i] = rgig(1, param=c(0.5,delta_i_hat,gamma_i_hat))
}
z_record[[itr]] = z
if (itr%%1200==0){print(paste0("Dist:",dist_eps," p:",p," itr: ",itr,"/",itr_total, " beta_p: ",beta_p))}
}
t = as.numeric(proc.time()-ptm)[3]
save(beta_p_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Gibbs without Scale\\","GWOS_",p,"_",dist_eps,"_betap.RData"))
save(z_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Gibbs with Scale\\","GWOS_",p,"_",dist_eps,"_z.RData"))
save(t, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Gibbs with Scale\\","GWOS_",p,"_",dist_eps,"_t.RData"))
}
}
beta_p_record
# install.packages("matrixNormal")
# install.packages("GeneralizedHyperbolic")
# install.packages("mcmcse")
# install.packages("invgamma")
library(MASS)
library(matrixNormal)
library(GeneralizedHyperbolic)
library(mcmcse)
library(invgamma)
rm(list=ls())
set.seed(0)
source("C:\\Users\\juyil\\Documents\\la\\R\\data_sim1.R")
## Setup
quantiles=c(0.1,0.5,0.9)
dist_eps_list=c("stdN","heteroN","student")  ## heteroN requires d>=3
# dist_eps_list=c("stdN","student")
itr_total = 12
n=100
d=3 #dimension of x
beta_p=matrix(c(1,1,1))
n0=3
s0=0.1
for (dist_eps in dist_eps_list){
for (p in quantiles){
## Generate Data
data = generate_data(n=n, d=d, dist_eps=dist_eps, beta_p=beta_p)
x = data[[1]]; y=data[[2]]
y[which(y < 0)] = 0
## Initialization
sigma=rinvgamma(1,n0/2,s0/2)
u=rnorm(n,0,1)
z=rexp(n)
v=sigma*z
theta = (1-2*p)/(p*(1-p))
tau2 = 2/(p*(1-p))
gamma_i_hat = 2/sigma + theta^2/(tau2*sigma)
## Gibbs sampler with scale
ptm = proc.time()
beta_p0=matrix(rep(0,d),d,1)
B_p0=diag(d)*100
beta_p = matrix(mvrnorm(1, beta_p0, B_p0))
beta_p_record = rep(list(), itr_total)
v_record = rep(list(), itr_total)
for (itr in 1:itr_total){
## B_p_hat
B_p_hat = solve(B_p0)
for (i in 1:n){
B_p_hat = B_p_hat + (x[,i]%*%t(x[,i]) / (tau2*sigma*v[i]))
}
B_p_hat = solve(B_p_hat)
## beta_p_hat
beta_p_hat = solve(B_p0)%*%beta_p0
for (i in 1:n){
beta_p_hat = beta_p_hat + matrix(x[,i],d,1)*(y[i]-theta*v[i]) / (tau2*sigma*v[i])
}
beta_p_hat = B_p_hat %*% beta_p_hat
beta_p = matrix(mvrnorm(1,beta_p_hat,B_p_hat),d,1)
beta_p_record[[itr]] = beta_p
## v
for (i in 1:n){
delta_i_hat = (y[i]-(t(x[,1])%*%beta_p))^2/(tau2*sigma)
v[i] = rgig(1, lambda=0.5, chi=delta_i_hat, psi=gamma_i_hat)
}
v_record[[itr]] = v
if (itr%%1200==0){print(paste0("Dist:",dist_eps," p:",p," itr: ",itr,"/",itr_total))}
}
t = as.numeric(proc.time()-ptm)[3]
save(beta_p_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Tobit with Scale\\","TWS_",p,"_",dist_eps,"_betap.RData"))
save(v_record, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Tobit with Scale\\","TWS_",p,"_",dist_eps,"_v.RData"))
save(t, file=paste0("C:\\Users\\juyil\\Documents\\la\\R\\Tobit with Scale\\","TWS_",p,"_",dist_eps,"_t.RData"))
}
}
beta_p_record
source("C:\\Users\\juyil\\Documents\\la\\R\\Tobit without Scale")
